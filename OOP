"""
 ООП - объекто-орентированное программирование - методология или стиль програмирования
 на основе описания типов(моделей) предметной облости и их взаимодействия
 Создание классов и экземпляров (объектов), имеющих определенные св-ва(атрибуты)
 и методы (функции)

 Основные понятия ООП:

 Абстрогирование
 Инкапсуляция
 Наследование
 Полиморфизм
"""
class Car:
    # атрибуты класса (общие для всех объектов)
    color = 'Black'
    year = 2020
    
    def __init__(self, color, year, brand, model):
        self.color = color
        self.year = year
        self.brand = brand
        self.model = model
        self.is_power = False
        self.is_stopped = True

    def get_car_info(self):
        info = f"Машина {self.brand} {self.model} {self.color} {self.year} года"
        return info

   # метод объекта
    def start(self):
        car = self.get_car_info()
        if self.is_power:
              print(f"{car} уже заведина!")
        else:
            self.is_power = True
            print(f"{car} завелась")

    def turn(self, direction):
        car = self.get_car_info()
        valid_direction = ("налево", "направо")
        if direction.lower() in valid_direction:
            print(f"{car} повернула  {direction}")
        else:
            print(f" Направление может быть одним из следующих: {valid_direction}")

def power_off(self):
    car = self.get_car_info()
    if not self.is_power:
        print(f"{car} уже заглушина ")
    else:
        if self.is_stopped:
         print(f"{car} заглушилась")
         self.is_power = False
        else:
            print(f"Необходима остановить  машину {car}")



def stop(self):
        car = self.get_car_info()
        if self.is_power:
            if self.is_stopped:
               print(f"{car} уже остановлена")
            else:
                print(f"{car} остановилась")
                self.is_stopped = True
        else:
            print(f"Необходимо завести машину {car}")

def go(self):
    car = self.get_car_info()
    if not self.is_power:
        print(f"Необходимо завести машину {car}")
    else:
        print(f"{car} поехала прямо!")
        self.is_stopped = False

def __str__(self):
    return f"{self.brand} {self.model}"

# создание объекта(экземпляра) класса
car_1 = Car(color='red', year=2020, brand='bmw', model='x5')
car_2 = Car(color='black', year=2023, brand='audi', model='a5')

# # получение доступа к атрибутам класса
# print(car_1.color) # через имя объекта
# print(Car.color) # через имя класса
#
# print(car_2.color)

# вызов метода объекта
# car_1.start()
# car_1.start()
# car_2.start()
# car_2.start()

# car_1.turn(direction="налево")
# car_2.turn(direction="направо")

car_1.start()
car_1.go()
car_1.stop()
car_1.power_off()
